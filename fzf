#!/bin/bash

function _fzf_compgen_path {
    fdfind --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
function _fzf_compgen_dir {
    fdfind --type d --hidden --follow --exclude ".git" . "$1"
}

source /usr/share/doc/fzf/examples/key-bindings.bash
#source /usr/share/doc/fzf/examples/completion.bash

function git-branchit {
    git rev-parse HEAD > /dev/null 2>&1 &&
    git branch --all |
    grep -v HEAD |
    fzf |
    sed 's/.* //'
    #git branch --color=always --sort=-committerdate
    #fzf --height 50% --ansi --no-multi --preview-window right:65%
    #--preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})'
}

function git-checkit {
    git rev-parse HEAD > /dev/null 2>&1 &&
    echo 'ðŸ”€ Pick the branch:' &&
    branch=$(git-branchit) &&
    [ -n "$branch" ] &&
    (
        [ "$branch" = "${branch#remotes/}" ] &&
        git checkout "$branch" ||
        git checkout --track "$branch"
    )
}

function git-forgetit {
    git rev-parse HEAD > /dev/null 2>&1 &&
    echo 'ðŸ”€ Pick the branch:' &&
    branch=$(git-branchit) &&
    [ -n "$branch" ] &&
    git branch -d "$branch"
}

function git-state {
    echo 'ðŸ“œ Status: \n' &&
    git status &&
    echo '\nðŸ“‹ Last commit:\n' &&
    git last &&
    echo '\nâŒ› Recent history:\n' &&
    git hist
}

function git-branches {
    git for-each-ref --sort=-committerdate refs/heads --color=always \
    --format='%(refname:short)|%(color:green)%(subject)|%(authorname)|%(committerdate:relative)$(color:reset)' |
    column -t -s'|'
}


#function git-select-branch {
#    echo "$(git branch --all | fzf | tr -d '[:space:]')"
#}
#
#function git-checkit {
#    branch=$(git-select-branch)
#    [ -n "$branch" ] && git checkout "$branch"
#}
#
#function git-pushit {
#    branch=$(git-select-branch)
#    [ -n "$branch" ] && git push origin "$branch"
#}
#
#function is_in_git_repo {
#  git rev-parse HEAD > /dev/null 2>&1
#}
#
#function git-status-files {
#    is_in_git_repo &&
#        git -c color.status=always status --short |
#        fzf --height 40% -m --ansi --nth 2..,.. | awk '{print $2}'
#}
#
#function git-branches {
#    is_in_git_repo &&
#        git branch -a -vv --color=always | grep -v '/HEAD\s' |
#        fzf --height 40% --ansi --multi --tac | sed 's/^..//' | awk '{print $1}' |
#        sed 's#^remotes/[^/]*/##'
#}
#
#function git-tags {
#    is_in_git_repo &&
#        git tag --sort -version:refname |
#        fzf --height 40% --multi
#}
#
#function git-hashes {
#    is_in_git_repo &&
#        git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph |
#        fzf --height 40% --ansi --no-sort --reverse --multi | grep -o '[a-f0-9]\{7,\}'
#}
#
#function git-remotes {
#    is_in_git_repo &&
#        git remote -v | awk '{print $1 " " $2}' | uniq |
#        fzf --height 40% --tac | awk '{print $1}'
#}
#
#bind '"\C-g\C-f": "$(git-status-files)\e\C-e\er"'
#bind '"\C-g\C-b": "$(git-branches)\e\C-e\er"'
#bind '"\C-g\C-t": "$(git-tags)\e\C-e\er"'
#bind '"\C-g\C-h": "$(git-hashes)\e\C-e\er"'
#bind '"\C-g\C-r": "$(git-remotes)\e\C-e\er"'
